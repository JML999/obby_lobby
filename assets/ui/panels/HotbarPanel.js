class HotbarPanel {
    constructor() {
        this.container = null;
        this.hotbarElement = null;
        this.hotbarSlots = [];
        this.selectedSlot = 1; // Default to first editable slot (slot 1 after save)
        this.maxSlots = 6;
        this.permanentActions = [
            { id: 'save', icon: 'ðŸ’¾', label: 'Save', action: 'saveCourse' }
        ];
        
        // State management
        this.currentPlayerState = 'LOBBY'; // Track current state
        this.isVisible = false;
        this.isFlying = false; // Track if the player is in fly mode
        
        // Initialize empty hotbar
        this.initializeHotbar();
    }

    initialize(containerId) {
        this.container = document.getElementById(containerId);
        if (!this.container) {
            console.error(`[HotbarPanel] Container with ID '${containerId}' not found.`);
            return;
        }

        this.createHotbarUI();
        this.addStyles();
        this.setupEventListeners();
        
        // Initially hide the hotbar (only show in build mode)
        this.setVisible(false);
        
        // Listen for hotbar updates and state changes
        if (window.hytopia && window.hytopia.onData) {
            window.hytopia.onData((data) => {
                if (data.type === 'hotbarUpdate') {
                    this.updateSlot(data.slotIndex, data.block);
                } else if (data.type === 'playerStateChanged') {
                    this.onPlayerStateChanged(data.state, data.plotIndex, data.isMobile, data.mobileControls);
                } else if (data.type === 'flyModeChanged') {
                    this.onFlyModeChanged(data.isFlying);
                }
                if (data.type === 'showMobilePlayerOptions') {
                    if (window.HotbarPanel && window.HotbarPanel.setVisible) {
                        window.HotbarPanel.setVisible(false);
                    }
                }
                if (data.type === 'plotInteractionEnded') {
                    // Only show hotbar if still in build mode
                    if (window.BlockInventoryPanel && window.BlockInventoryPanel.isInBuildMode && window.BlockInventoryPanel.isInBuildMode()) {
                        if (window.HotbarPanel && window.HotbarPanel.setVisible) {
                            window.HotbarPanel.setVisible(true);
                        }
                    }
                }
            });
        }
        
        console.log('[HotbarPanel] Initialized successfully.');
    }

    initializeHotbar() {
        // First 3 slots are reserved for permanent actions
        this.hotbarSlots = Array(this.maxSlots).fill(null);
        // Start with completely empty hotbar for slots 3-8
        console.log('[HotbarPanel] Initialized with empty hotbar and permanent action buttons');
    }

    createHotbarUI() {
        this.hotbarElement = document.createElement('div');
        this.hotbarElement.id = 'hotbar-ui';
        this.hotbarElement.className = 'hotbar-container';

        this.hotbarElement.innerHTML = `
            <div class="hotbar-wrapper">
                <div class="hotbar-grid" id="hotbar-grid">
                    <!-- Hotbar slots will be generated by JavaScript -->
                </div>
                <div class="hotbar-label">
                    <div class="hotbar-instruction">E: Inventory | F: Toggle Creative Mode</div>
                    <div class="hotbar-instruction">Left/Right Click: Place/Delete Blocks</div>
                </div>
            </div>
        `;

        this.container.appendChild(this.hotbarElement);
        this.generateHotbarSlots();
    }

    generateHotbarSlots() {
        const grid = document.getElementById('hotbar-grid');
        grid.innerHTML = '';

        for (let i = 0; i < this.maxSlots; i++) {
            const slot = document.createElement('div');
            slot.className = 'hotbar-slot';
            slot.dataset.slotIndex = i;

            // Add slot number badge to all slots
            const slotNumber = document.createElement('div');
            slotNumber.className = 'hotbar-slot-number';
            slotNumber.textContent = i + 1;
            slot.appendChild(slotNumber);

            // Only slot 0 is permanent action (save)
            if (i === 0) {
                slot.classList.add('hotbar-action-slot');
                const action = this.permanentActions[0];
                const actionBtn = document.createElement('button');
                actionBtn.className = 'hotbar-action-btn';
                actionBtn.title = action.label;
                actionBtn.innerHTML = `<span class="hotbar-action-icon">${action.icon}</span>`;
                actionBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.handleActionButton(action.action);
                });
                slot.appendChild(actionBtn);
            } else {
                if (i === this.selectedSlot) {
                    slot.classList.add('selected');
                }
                const slotContent = document.createElement('div');
                slotContent.className = 'hotbar-slot-content';
                const block = this.hotbarSlots[i];
                if (block) {
                    if (block.type) {
                        // Obstacle display - style like inventory
                        const obstacleText = document.createElement('div');
                        obstacleText.className = 'hotbar-obstacle-text';
                        obstacleText.textContent = block.name;
                        slotContent.appendChild(obstacleText);
                    } else {
                        // Block display - use image like inventory
                        const blockImage = document.createElement('img');
                        blockImage.className = 'hotbar-block-icon';
                        blockImage.src = this.getItemIconPath(block);
                        blockImage.alt = block.name;
                        blockImage.title = this.getItemTitle(block);
                        slotContent.appendChild(blockImage);
                    }
                }
                slot.appendChild(slotContent);
            }
            grid.appendChild(slot);
        }
    }

    setupEventListeners() {
        // Number key selection (1 for save action, 2-6 for editable slots)
        document.addEventListener('keydown', (e) => {
            if (this.isInputElementActive()) return;
            
            const keyNum = parseInt(e.key);
            
            // Only respond to keys when in build mode and hotbar is visible
            if (!this.isInBuildMode() || !this.isVisible) return;
            
            if (keyNum === 1) {
                e.preventDefault();
                // Trigger save action (slot 0)
                const action = this.permanentActions[0];
                if (action) {
                    this.handleActionButton(action.action);
                }
            } else if (keyNum >= 2 && keyNum <= 6) {
                e.preventDefault();
                // Select editable slots 1-5 (keys 2-6 map to slots 1-5)
                this.selectSlot(keyNum - 1);
            }
        });
        
        // Mouse selection (only for editable slots and when in build mode)
        const grid = document.getElementById('hotbar-grid');
        grid.addEventListener('click', (e) => {
            if (!this.isInBuildMode() || !this.isVisible) return;
            
            const slot = e.target.closest('.hotbar-slot');
            if (slot) {
                const slotIndex = parseInt(slot.dataset.slotIndex);
                if (slotIndex >= 1) { // Only allow clicking editable slots 1-5
                    this.selectSlot(slotIndex);
                }
            }
        });
        
        // Scroll wheel selection (only for editable slots and when in build mode)
        grid.addEventListener('wheel', (e) => {
            if (!this.isInBuildMode() || !this.isVisible) return;
            
            e.preventDefault();
            const delta = e.deltaY > 0 ? 1 : -1;
            let newSlot = this.selectedSlot;
            do {
                newSlot = (newSlot + delta + this.maxSlots) % this.maxSlots;
            } while (newSlot < 1); // Only allow slots 1-5
            this.selectSlot(newSlot);
        });
        
        // Drag and drop (only for editable slots and when in build mode)
        grid.addEventListener('dragover', (e) => {
            if (!this.isInBuildMode() || !this.isVisible) return;
            e.preventDefault();
            e.dataTransfer.dropEffect = 'copy';
        });
        
        grid.addEventListener('drop', (e) => {
            if (!this.isInBuildMode() || !this.isVisible) return;
            
            e.preventDefault();
            const slot = e.target.closest('.hotbar-slot');
            if (slot) {
                const slotIndex = parseInt(slot.dataset.slotIndex);
                if (slotIndex >= 1) { // Only allow dropping on editable slots 1-5
                    const blockData = e.dataTransfer.getData('application/json');
                    if (blockData) {
                        const block = JSON.parse(blockData);
                        this.setSlotBlock(slotIndex, block);
                    }
                }
            }
        });
    }

    selectSlot(slotIndex) {
        // Only allow selecting editable slots (1-5)
        if (slotIndex === 0 || slotIndex >= this.maxSlots) {
            console.log('[HotbarPanel] Cannot select permanent or invalid slot:', slotIndex);
            return;
        }

        // Update visual selection
        const previousSlot = this.hotbarElement.querySelector('.hotbar-slot.selected');
        if (previousSlot) {
            previousSlot.classList.remove('selected');
        }

        const newSlot = this.hotbarElement.querySelector(`[data-slot-index="${slotIndex}"]`);
        if (newSlot) {
            newSlot.classList.add('selected');
            this.selectedSlot = slotIndex;
            
            // Send the selected item to the game
            const item = this.hotbarSlots[slotIndex];
            this.sendSelectionToGame(item);
            
            console.log('[HotbarPanel] Selected slot:', slotIndex, 'item:', item);
        }
    }

    sendSelectionToGame(item) {
        if (!item) {
            // Empty slot
            hytopia.sendData({
                type: 'selectBlock',
                blockId: null
            });
        } else if (item.type) {
            // Obstacle item
            hytopia.sendData({
                type: 'selectObstacle',
                obstacleId: item.id,
                obstacleType: item.type,
                obstacleSize: item.size
            });
        } else {
            // Block item
            hytopia.sendData({
                type: 'selectBlock',
                blockId: item.id
            });
        }
    }

    setSlotBlock(slotIndex, item) {
        if (slotIndex === 0 || slotIndex >= this.maxSlots) return; // Prevent editing permanent slot and out of bounds
        this.hotbarSlots[slotIndex] = item;
        // Update the visual slot
        const slot = this.hotbarElement.querySelector(`[data-slot-index="${slotIndex}"]`);
        if (slot) {
            const content = slot.querySelector('.hotbar-slot-content');
            content.innerHTML = '';
            if (item) {
                if (item.type) {
                    // Obstacle display - style like inventory
                    const obstacleText = document.createElement('div');
                    obstacleText.className = 'hotbar-obstacle-text';
                    obstacleText.textContent = item.name;
                    content.appendChild(obstacleText);
                } else {
                    // Block display - use image like inventory
                    const itemImage = document.createElement('img');
                    itemImage.className = 'hotbar-block-icon';
                    itemImage.src = this.getItemIconPath(item);
                    itemImage.alt = item.name;
                    itemImage.title = this.getItemTitle(item);
                    content.appendChild(itemImage);
                }
            }
        }
        // If this is the selected slot, update the game
        if (slotIndex === this.selectedSlot) {
            this.sendSelectionToGame(item);
        }
        console.log('[HotbarPanel] Set slot', slotIndex, 'to item:', item);
    }

    getSelectedBlock() {
        return this.hotbarSlots[this.selectedSlot];
    }

    getSelectedSlotIndex() {
        return this.selectedSlot;
    }

    getHotbarSlots() {
        return this.hotbarSlots;
    }

    clearSlot(slotIndex) {
        this.setSlotBlock(slotIndex, null);
    }

    updateSlot(slotIndex, item) {
        this.setSlotBlock(slotIndex, item);
    }

    handleActionButton(action) {
        // Only handle action buttons when in build mode
        if (!this.isInBuildMode()) {
            console.log('[HotbarPanel] Action button ignored - not in build mode');
            return;
        }
        
        if (action === 'saveCourse') {
            hytopia.sendData({ type: 'saveCourse' });
        }
        console.log('[HotbarPanel] Action button pressed:', action);
    }

    onPlayerStateChanged(newState, plotIndex, isMobile, mobileControls) {
        console.log('[HotbarPanel] Player state changed to:', newState, 'plotIndex:', plotIndex, 'isMobile:', isMobile);
        this.currentPlayerState = newState;
        
        // Only show hotbar when in building mode AND inventory is not open
        if (newState === 'BUILDING') {
            // Check if inventory is currently open before showing hotbar
            const inventoryOpen = window.BlockInventoryPanel && window.BlockInventoryPanel.inventoryOpen;
            if (!inventoryOpen) {
                this.setVisible(true);
                // Update mobile-specific styling
                if (isMobile) {
                    this.hotbarElement.classList.add('mobile-hotbar');
                    console.log('[HotbarPanel] Mobile styling applied to hotbar');
                } else {
                    this.hotbarElement.classList.remove('mobile-hotbar');
                }
                console.log('[HotbarPanel] Build mode activated - hotbar now visible');
            } else {
                console.log('[HotbarPanel] Build mode activated but inventory is open - keeping hotbar hidden');
                this.setVisible(false);
            }
        } else {
            this.setVisible(false);
            console.log('[HotbarPanel] Exited build mode - hotbar hidden');
        }
        
        // Update creative mode hint based on current state
        this.updateCreativeModeHint();
    }

    onFlyModeChanged(isFlying) {
        console.log('[HotbarPanel] Fly mode changed to:', isFlying);
        this.isFlying = isFlying;
        this.updateCreativeModeHint();
    }

    updateCreativeModeHint() {
        if (!window.CreativeModeHintPanel) return;
        
        // Show hint when: in build mode AND not flying (walking mode)
        // Hide hint when: not in build mode OR flying (creative mode)
        const shouldShowHint = this.currentPlayerState === 'BUILDING' && !this.isFlying;
        
        if (shouldShowHint) {
            window.CreativeModeHintPanel.show();
            console.log('[HotbarPanel] Showing creative mode hint (walking mode)');
        } else {
            window.CreativeModeHintPanel.hide();
            console.log('[HotbarPanel] Hiding creative mode hint (not walking mode)');
        }
    }

    setVisible(visible) {
        this.isVisible = visible;
        if (this.hotbarElement) {
            this.hotbarElement.style.display = visible ? 'block' : 'none';
        }
    }

    isInBuildMode() {
        return this.currentPlayerState === 'BUILDING';
    }

    isInputElementActive() {
        const activeElement = document.activeElement;
        return activeElement && (
            activeElement.tagName === 'INPUT' ||
            activeElement.tagName === 'TEXTAREA' ||
            activeElement.isContentEditable
        );
    }

    getAssetBaseUrl() {
        // Check if we're in a Hytopia environment with CDN_ASSETS_URL available
        if (typeof window.CDN_ASSETS_URL !== 'undefined' && window.CDN_ASSETS_URL) {
            return window.CDN_ASSETS_URL;
        }
        
        // Try to extract it from a script tag's src attribute
        const scriptTags = document.getElementsByTagName('script');
        for (let i = 0; i < scriptTags.length; i++) {
            const src = scriptTags[i].src;
            if (src && src.includes('/ui/panels/')) {
                const baseUrl = src.substring(0, src.indexOf('/ui/panels/'));
                return baseUrl;
            }
        }
        
        // Fallback to current origin
        return window.location.origin;
    }

    getItemIconPath(item) {
        const baseUrl = this.getAssetBaseUrl();
        
        // Handle obstacles
        if (item.type && item.textureUri) {
            if (item.textureUri.startsWith('/')) {
                return `${baseUrl}${item.textureUri}`;
            } else {
                return `${baseUrl}/${item.textureUri}`;
            }
        }
        
        // Handle blocks
        if (item.textureUri) {
            if (item.textureUri.startsWith('/')) {
                return `${baseUrl}${item.textureUri}`;
            } else {
                return `${baseUrl}/${item.textureUri}`;
            }
        } else {
            // Fallback to a default block icon
            return `${baseUrl}/blocks/dirt.png`;
        }
    }

    getItemTitle(item) {
        if (!item) return '';
        
        if (item.type && item.size) {
            // Obstacle with size
            return `${item.name} (${item.size})`;
        } else {
            // Block
            return item.name;
        }
    }

    addStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .hotbar-container {
                position: fixed;
                bottom: 20px;
                left: 50%;
                transform: translateX(-50%);
                z-index: 500;
                font-family: 'Inter', sans-serif;
                user-select: none;
            }
            .hotbar-grid {
                display: flex;
                gap: 4px;
                background-color: rgba(0, 0, 0, 0.7);
                padding: 8px;
                border-radius: 8px;
                border: 2px solid #444;
                backdrop-filter: blur(4px);
            }
            .hotbar-slot {
                position: relative;
                width: 60px;
                height: 60px;
                background-color: #333;
                border: 2px solid #555;
                border-radius: 6px;
                cursor: pointer;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .hotbar-slot.selected {
                border-color: #fff;
                background-color: #fff;
                box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
            }
            .hotbar-action-slot {
                background: linear-gradient(135deg, #23272b, #2d3238);
                border: 2px solid #888;
                cursor: default;
                box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            }
            .hotbar-action-btn {
                width: 48px;
                height: 48px;
                border: none;
                background: none;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 28px;
                border-radius: 6px;
                cursor: pointer;
                transition: background 0.2s;
                outline: none;
            }
            .hotbar-action-btn:hover {
                background: rgba(76,175,80,0.12);
            }
            .hotbar-action-icon {
                font-size: 28px;
                filter: drop-shadow(0 1px 2px rgba(0,0,0,0.7));
            }
            .hotbar-slot-number {
                position: absolute;
                top: -2px;
                right: -2px;
                width: 16px;
                height: 16px;
                background-color: #666;
                border: 1px solid #888;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 10px;
                font-weight: bold;
                color: #fff;
                z-index: 10;
            }
            .hotbar-slot.selected .hotbar-slot-number {
                background-color: #fff;
                border-color: #fff;
                color: #333;
            }
            .hotbar-slot-content {
                width: 100%;
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 4px;
                overflow: hidden;
            }
            .hotbar-block-item {
                width: 48px;
                height: 48px;
                border-radius: 3px;
                background-color: #666;
                border: 1px solid #888;
            }
            .hotbar-block-icon {
                width: 48px;
                height: 48px;
                border-radius: 3px;
                background-color: #666;
                border: 1px solid #888;
            }
            .hotbar-size-label {
                position: absolute;
                bottom: -2px;
                right: -2px;
                background: rgba(0, 0, 0, 0.8);
                color: #ffffff;
                font-weight: 700;
                font-size: 8px;
                padding: 1px 3px;
                border-radius: 3px;
                line-height: 1;
                text-shadow: 0 1px 1px rgba(0, 0, 0, 6);
                border: 1px solid rgba(255, 255, 255, 0.2);
                min-width: 10px;
                text-align: center;
                pointer-events: none;
                z-index: 5;
            }
            .hotbar-obstacle-text {
                font-size: 6px;
                font-weight: bold;
                color: #fff;
                text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
                text-align: center;
                line-height: 1.1;
                padding: 3px 2px;
                border-radius: 3px;
                background: rgba(0, 0, 0, 0.7);
                border: 1px solid rgba(255, 255, 255, 0.2);
                max-width: 54px;
                min-width: 0;
                max-height: 26px;
                overflow: hidden;
                display: flex;
                align-items: center;
                justify-content: center;
                flex-direction: column;
                word-break: break-word;
                white-space: normal;
            }
            @media (max-width: 768px) {
                .hotbar-obstacle-text {
                    font-size: 9px;
                    padding: 2px 1px;
                    max-width: 38px;
                    max-height: 20px;
                }
            }
            .hotbar-label {
                text-align: center;
            }
            .hotbar-instruction {
                color: #ccc;
                font-size: 12px;
                text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
                opacity: 0.8;
            }
            @media (max-width: 768px) {
                .hotbar-container {
                    bottom: 10px;
                }
                .hotbar-slot {
                    width: 50px;
                    height: 50px;
                }
                .hotbar-block-item {
                    width: 40px;
                    height: 40px;
                }
                .hotbar-block-icon {
                    width: 40px;
                    height: 40px;
                }
                .hotbar-slot-number {
                    width: 14px;
                    height: 14px;
                    font-size: 9px;
                }
                .hotbar-instruction {
                    font-size: 11px;
                }
                .hotbar-grid {
                    padding: 6px;
                    gap: 3px;
                }
                .hotbar-action-btn {
                    width: 38px;
                    height: 38px;
                    font-size: 20px;
                }
                .hotbar-action-icon {
                    font-size: 20px;
                }
                .hotbar-obstacle-text {
                    font-size: 9px;
                    padding: 2px;
                    max-width: 42px;
                }
            }
            @media (max-width: 480px) {
                .hotbar-slot {
                    width: 45px;
                    height: 45px;
                }
                .hotbar-block-item {
                    width: 35px;
                    height: 35px;
                }
                .hotbar-block-icon {
                    width: 35px;
                    height: 35px;
                }
                .hotbar-grid {
                    padding: 4px;
                    gap: 2px;
                }
                .hotbar-action-btn {
                    width: 32px;
                    height: 32px;
                    font-size: 16px;
                }
                .hotbar-action-icon {
                    font-size: 16px;
                }
                .hotbar-obstacle-text {
                    font-size: 14px;
                    padding: 3px;
                }
            }

            /* Mobile-specific hotbar styles when mobile class is applied */
            .mobile-hotbar .hotbar-container {
                bottom: 80px; /* Move up to avoid mobile controls */
            }
            
            .mobile-hotbar .hotbar-grid {
                padding: 6px;
                gap: 4px;
                background-color: rgba(0, 0, 0, 0.85);
            }
            
            .mobile-hotbar .hotbar-slot {
                width: 48px;
                height: 48px;
                border-width: 3px;
            }
            
            .mobile-hotbar .hotbar-block-item,
            .mobile-hotbar .hotbar-block-icon {
                width: 38px;
                height: 38px;
            }
            
            .mobile-hotbar .hotbar-slot-number {
                width: 16px;
                height: 16px;
                font-size: 10px;
                font-weight: bold;
            }
            
            .mobile-hotbar .hotbar-instruction {
                display: none; /* Hide instructions on mobile to save space */
            }
            
            .mobile-hotbar .hotbar-action-btn {
                width: 40px;
                height: 40px;
                font-size: 22px;
            }
            
            .mobile-hotbar .hotbar-action-icon {
                font-size: 22px;
            }
        `;
        document.head.appendChild(style);
    }
}

// Make it globally available as a singleton instance
window.HotbarPanel = new HotbarPanel(); 